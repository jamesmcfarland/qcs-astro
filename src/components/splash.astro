---
import { Picture } from "@astrojs/image/components";
import HeroImage from "~/components/hero-image.astro";
import Starfield from "~/components/starfield.astro";
import whiteLogo from "~/assets/whitelogo.png";
import qubLogoLand from "~/assets/qub_logo_land.png"
const widths = [450, 800];
const sizes = "(min-width: 640px) 42vw, 67vw";
---

<section class="relative h-full bg-black">
  <Starfield />
  <div id="splash-bg-fallback" class="absolute inset-0 hidden opacity-40">
    <HeroImage />
  </div>
  <div class="absolute top-0 right-0 m-8">
    <span class="text-xs font">A society of</span>
    <Picture
        src={qubLogoLand}
        sizes={sizes}
        widths={widths}
        loading="eager"
        alt="QUB logo"
        class="h-8 inline ml-2"
      />
  </div>
  <div class="relative grid h-full place-items-center sm:grid-cols-2">
    <h2
      class="flex flex-col gap-2 self-end sm:gap-4 sm:self-auto sm:justify-self-end"
    >
      <Picture
        src={whiteLogo}
        sizes={sizes}
        widths={widths}
        loading="eager"
        alt="QCS logo"
        class="h-24 text-white md:h-24"
      />
      <div
        class="gradient-text text-center font-extrabold tracking-tighter text-8xl"
      >
        For students <br /> by students.
      </div>
    </h2>
    <div
      id="threejs-container"
      class="h-full w-2/3 max-w-xl self-start sm:w-10/12 sm:self-auto sm:justify-self-start"
    >
      <script
        async
        src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"
      ></script>

      <script type="importmap" defer is:inline>
        {
          "imports": {
            "three": "https://unpkg.com/three@0.151.3/build/three.module.js",
            "three/addons/": "https://unpkg.com/three@0.151.3/examples/jsm/"
          }
        }
      </script>

      <script is:inline type="module" defer>
        import * as THREE from "three";
        import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";
        import { DRACOLoader } from "three/addons/loaders/DRACOLoader.js";

        const container = document.getElementById("threejs-container");

        if (container) {
          const scene = new THREE.Scene();
          scene.background = null;
          const camera = new THREE.PerspectiveCamera(
            75,
            container.offsetWidth / container.offsetHeight,
            0.1,
            1000
          );

          const renderer = new THREE.WebGLRenderer({ alpha: true });
          renderer.setPixelRatio(window.devicePixelRatio);
          renderer.setSize(container.offsetWidth, container.offsetHeight);

          const threeCanvas = document.getElementById("threejs-canvas");
          if (threeCanvas) {
            threeCanvas.appendChild(renderer.domElement);

            const geometry = new THREE.BoxGeometry(1, 1, 1);
            const material = new THREE.MeshPhongMaterial();
            const cube = new THREE.Mesh(geometry, material);
            cube.position.set(0, 0.5, -10);
            // scene.add(cube);

            const ambientLight = new THREE.AmbientLight("0xf5da9e", 3);
            const mainLight = new THREE.DirectionalLight("0xFF5B00", 6);
            mainLight.position.set(10, 10, 10);

            const hemiLight = new THREE.HemisphereLight(
              "white",
              "darkslategray",
              1
            );

            scene.add(ambientLight);
            scene.add(mainLight);
            // scene.add(hemiLight)

            const size = 10;
            const divisions = 10;

            // const gridHelper = new THREE.GridHelper(size, divisions);
            // scene.add(gridHelper);

            camera.position.z = 1;
            camera.position.y = 0.5;
            camera.position.x = 0;
            camera.rotation.x = 0;

            // const controls = new OrbitControls(camera, renderer.domElement);

            let model = null;
            let model2 = null;
            let model3 = null;

            const loader = new GLTFLoader();
            const dracoLoader = new DRACOLoader();

            dracoLoader.setDecoderConfig({ type: "js" });
            dracoLoader.setDecoderPath(
              "https://www.gstatic.com/draco/v1/decoders/"
            );
            loader.setDRACOLoader(dracoLoader);

            loader.load("/qcs.gltf", function (gltf) {
              model = gltf.scene;
              model.material = new THREE.MeshLambertMaterial();
              model.rotation.x = (Math.PI / 180) * 70;
              model.position.set(0.5, 1, -2.5);
              model.scale.set(0.4, 0.4, 0.4);
              scene.add(model);

              model2 = gltf.scene.clone();
              model2.position.set(-0.5, -0.1, -2.5);
              model2.rotation.z = (Math.PI / 180) * -15;
              scene.add(model2);

              model3 = gltf.scene.clone();
              model3.position.set(0.5, -1.1, -2.5);
              model3.rotation.z = (Math.PI / 180) * 15;
              scene.add(model3);
            });

            window.addEventListener("resize", onWindowResize, false);
            function onWindowResize() {
              camera.aspect = container.offsetWidth / container.offsetHeight;
              camera.updateProjectionMatrix();
              renderer.setSize(container.offsetWidth, container.offsetHeight);
              render();
            }

            const generateRotation = (base, multiplier) => {
              const scroll =
                (document.documentElement.scrollTop ||
                  document.body.scrollTop) /
                ((document.documentElement.scrollHeight ||
                  document.body.scrollHeight) -
                  document.documentElement.clientHeight);
              return (
                (Math.PI / 180) * base + (Math.PI / 180) * scroll * multiplier
              );
            };

            function animate() {
              requestAnimationFrame(animate);
              // playScrollAnimations()

              if (model && model2 && model3) {
                // model.rotation.x += 0.01;

                model.rotation.z = generateRotation(15, 1000);
                model2.rotation.z = generateRotation(-10, -1000);
                model3.rotation.z = generateRotation(30, 2000);
              }

              renderer.render(scene, camera);
            }
            animate();
          }
        }
      </script>
      <div id="threejs-canvas" class="object-cover"></div>
    </div>
  </div>
</section>

<noscript>
  <style>
    #splash-bg-fallback {
      display: block;
    }
  </style>
</noscript>
